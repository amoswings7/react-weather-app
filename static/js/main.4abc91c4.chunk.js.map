{"version":3,"sources":["components/NavBar.js","components/Welcome.js","components/Curent_weather.js","components/Day.js","components/Forecast.js","App.js","index.js"],"names":["NavBar","setCity_name","setUnits","useState","value","setValue","className","onChange","e","target","onKeyUp","keyCode","length","alert","type","placeholder","required","onClick","Welcome","Current_weather","current_weather_data","units","weather_infor","icon","weather","description","temp","Math","round","main","feels_like","temp_max","temp_min","visibility","name","country","sys","windspeed","wind","speed","toString","src","alt","Day","day","dateInfor","Date","dt_txt","getDay","Forecast","forecast_data","map","date","id","random","App","city_name","setCurrent_weather_data","setForecast_data","display","setDisplay","loading","setLoading","useEffect","passcodekey","password","fetch","then","res","ok","json","catch","err","console","log","forecastData","list","filter","getHours","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4abc91c4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst NavBar = ({setCity_name,setUnits}) => {\r\n\r\n    const [value,setValue] = useState('')\r\n\r\n    //it updates useState value every single time an input changes value\r\n    function updateValue(e){\r\n        setValue(e.target.value);\r\n    }\r\n\r\n    //when a user clicks the right arrow button to enter a city\r\n    function searchHandler(){\r\n        if(value.length===0){\r\n            alert('you cannot enter an empty filled please fill in the field to search')\r\n            return\r\n        }\r\n        setCity_name(value);\r\n    }\r\n    //its fucntion that enables users to change unit value type from celsius to farenight degrees\r\n    function unitHandler(e){\r\n        setUnits(e.target.value)\r\n    }\r\n    //when a user clicks a enter keybord key then the input value submits\r\n    function onEnter(e){\r\n        if(e.keyCode ===13){\r\n            if(value.length===0){\r\n                alert('you cannot enter an empty filled please fill in the field to search')\r\n                return\r\n            }\r\n            setCity_name(value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <nav className='nav-bar'>\r\n            <div className='nav-header'>\r\n                <h1>My weather center app</h1>\r\n            </div>\r\n            <div className='nav-search-bar'>\r\n                <h3>Current weather and 5 day forecast</h3>\r\n                <select onChange={unitHandler}>\r\n                    <option value='metric'>metric unit measurement</option>\r\n                    <option value='imperial'>imperial unit measurement</option>\r\n                </select>\r\n                <div className='input-area'>\r\n                    <input onKeyUp={onEnter} onChange={updateValue} type=\"text\" placeholder='search for a city' required/>\r\n                    <button onClick={searchHandler} className='input-btn'><i className=\"fas fa-arrow-right\"></i></button>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n     );\r\n}\r\n \r\nexport default NavBar;","const Welcome = () => {\r\n    return (\r\n        <div className='welcome'>\r\n            <p>\r\n            Welcome to your weather center app where you can get your location's current weather update right to your device either on your smart phone or desktop. We offer accurate weather data and we also offer 5 day forecast so you can make plans right away and beaware of what to expect on particular days.You can search for almost any city in the world and get the current weather in that city. \r\n            </p>\r\n        </div>\r\n      );\r\n}\r\n \r\nexport default Welcome;","import React from 'react'\r\n\r\n\r\nconst Current_weather = ({current_weather_data,units,setUnits}) => {\r\n    const weather_infor = {\r\n        icon : current_weather_data.weather[0].icon,\r\n        description : current_weather_data.weather[0].description,\r\n        temp : Math.round(current_weather_data.main.temp),\r\n        feels_like : current_weather_data.main.feels_like,\r\n        temp_max : current_weather_data.main.temp_max,\r\n        temp_min : current_weather_data.main.temp_min,\r\n        visibility : ()=>{\r\n            if(current_weather_data.visibility >=4000 && current_weather_data.visibility < 10000 ){\r\n                return `Not so bad (${current_weather_data.visibility/1000} km)`\r\n            }else if(current_weather_data.visibility >= 10000 && current_weather_data.visibility <= 20000){\r\n                return `Good (${current_weather_data.visibility/1000} km)`\r\n            }else if(current_weather_data.visibility >20000){\r\n                return `Excellent (${current_weather_data.visibility/1000} km)`\r\n            }else{\r\n                return `Not clear enough (${current_weather_data.visibility/1000} km)`\r\n            }\r\n        },\r\n        name : current_weather_data.name,\r\n        country : current_weather_data.sys.country,\r\n        windspeed :()=>{\r\n            if(units=='metric'){\r\n                return (current_weather_data.wind.speed*3600/1000).toString()+' km/h';\r\n            }else{\r\n                return current_weather_data.wind.speed.toString()+' miles/hr'\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return ( \r\n        <div className='current-weather'>\r\n            <h2>Current weather</h2>\r\n            <main>\r\n                <aside className='left-aside'>\r\n                    <h3>{`${weather_infor.name}, ${weather_infor.country}`}</h3>\r\n                    <div className='temperature'>\r\n                        <div>\r\n                           <img src={`http://openweathermap.org/img/w/${weather_infor.icon}.png`} alt='weather-icon'/>\r\n                        </div>\r\n                        <h1>{weather_infor.temp}{units=='metric'?'°c':'°F'}</h1>\r\n                    </div>\r\n                    <p>{weather_infor.description}</p>\r\n                </aside>\r\n\r\n                <aside className='right-aside'>\r\n                    <div><p className='name'>Feels like :</p><p className='results'>{weather_infor.feels_like}{units=='metric'?'°c':'°F'}</p></div>\r\n                    <div><p className='name'>Max temp. :</p><p className='results'>{weather_infor.temp_max}{units=='metric'?'°c':'°F'}</p></div>\r\n                    <div><p className='name'>Min temp. :</p><p className='results'>{weather_infor.temp_min}{units=='metric'?'°c':'°F'}</p></div>\r\n                    <div><p className='name'>Wind speed :</p><p className='results'>{weather_infor.windspeed()}</p></div>\r\n                    <div><p className='name'>Visibility :</p><p className='results'>{weather_infor.visibility()}</p></div>\r\n                </aside>\r\n            </main>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Current_weather;","import React from 'react';\r\n\r\n\r\nconst Day = ({day,units}) => {\r\n\r\n    const dateInfor = {\r\n        name:()=>{\r\n            let name = null;\r\n            switch(new Date(day.dt_txt).getDay()){\r\n                case 0:\r\n                    name = 'Sunday'\r\n                    break;\r\n                case 1:\r\n                    name = 'Monday'\r\n                    break;\r\n                case 2:\r\n                    name = 'Tuesday'\r\n                    break;\r\n                case 3:\r\n                    name = 'Wedsyday'\r\n                    break;\r\n                case 4:\r\n                    name = 'Thursday'\r\n                    break;\r\n                case 5:\r\n                    name = 'Friday'\r\n                    break;\r\n                case 6:\r\n                    name = 'Saturday'\r\n                    break;\r\n                default:\r\n                    name='monday'\r\n            }\r\n            return name;\r\n        },\r\n        temp:day.main.temp,\r\n        description:day.weather[0].description,\r\n        icon:day.weather[0].icon\r\n    }\r\n\r\n    return ( \r\n        <div className='days'>\r\n            <h3 className='day'>{dateInfor.name()}</h3>\r\n            <div className='image-area'>\r\n               <img src={`http://openweathermap.org/img/w/${dateInfor.icon}.png`} alt='weather-icon'/>\r\n            </div>\r\n            <p>{dateInfor.description}</p>\r\n            <h3 className='temp'>{dateInfor.temp}{units=='metric'?'°c':'°F'}</h3>\r\n        </div>\r\n     ); \r\n}\r\n \r\nexport default Day;","import React from 'react';\r\nimport Day from './Day'\r\n\r\nconst Forecast = ({forecast_data,units}) => {\r\n    return ( \r\n        <div className='forecast'>\r\n            <h2>Five day forecast </h2>\r\n            <div className='grid'>\r\n                {forecast_data.map(date =>(\r\n                    <Day key ={date.weather[0].id*Math.random()} day={date} units={units}/>\r\n                ))}\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Forecast;","import './App.css';\nimport Navbar from './components/NavBar'\nimport Welcome from './components/Welcome'\nimport Current_weather from './components/Curent_weather'\nimport Forecast from './components/Forecast'\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const [city_name,setCity_name] = useState(null);\n  const [current_weather_data,setCurrent_weather_data] = useState(null);\n  const [forecast_data,setForecast_data] =useState([]);\n  const [units,setUnits] = useState('metric');\n  let [display,setDisplay] =useState(false);\n  let [loading,setLoading] = useState(false);\n\n  useEffect(()=>{\n    if(city_name ===null)return;\n    setLoading(true)\n    const passcodekey = 'appid'\n    const password = '7bd717dc76c91a0893bd61ca2da801e2'\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city_name}&${passcodekey}=${password}&units=${units}`).then(res =>{\n      if(!res.ok){\n        alert('oops sorry your city wasn\\'t found please enter a valid city name');\n        return false\n      }else{\n        return res.json()\n      }  \n    }).then(res => {\n       if(res === false){\n         return\n       }else{\n        setCurrent_weather_data(res)\n       }\n    }).catch(err =>{\n      console.log(err)\n    })\n\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city_name}&mode=json&${passcodekey}=${password}&units=${units}`).then(res=>{\n      if(!res.ok){\n        alert('oops sorry your city wasn\\'t found please enter a valid city name');\n        return false\n      }else{\n        return res.json()\n      }  \n    }).then(res => {\n      if(res === false){\n        setDisplay(false)\n        setLoading(false);\n        return\n      }else{\n        const forecastData = res.list.filter(date =>{\n          return new Date(date.dt_txt).getDay === new Date().getDay() || new Date(date.dt_txt).getHours() ===0\n        })\n        setForecast_data(forecastData);\n        setDisplay(true)\n      }\n    }).catch(err =>{\n      console.log(err)\n    })\n    return\n\n  },[city_name,units])\n\n  return (\n    <div className=\"App\">\n     <Navbar setCity_name={setCity_name} setUnits={setUnits}/>\n     <Welcome/>\n     {!display  && (<div id='no-city'><h3>{loading?'loading please wait...':'Please enter a city to display your weather'}</h3></div>)}\n     {display && <Current_weather current_weather_data={current_weather_data} units={units} setUnits={setUnits}/>}\n     {display &&  <Forecast forecast_data={forecast_data} units={units}/>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}